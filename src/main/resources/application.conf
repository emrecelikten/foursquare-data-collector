twitter {
  consumer.key = "<key here>"
  consumer.secret = "<key here>"
  access.token = "<key here>"
  access.secret = "<key here>"

  # Configuration parameters related to timed events
  duration {
    # The amount of time to wait before trying to reconnect to Twitter in case the client fails for some reason
    # Default is 30 seconds.
    sleep.reconnect = 30s

    # The amount of time to "sleep" before checking again when the received messages queue is empty
    # Default is 5 seconds.
    sleep.queueRecheck = 5s

    # The amount of time to wait the application to process remaining messages in the queue after
    # shutdown command is received. If this duration is exceeded, the application is forcibly terminated.
    # Default is 5 minutes.
    gracefulShutdown = 5m

    # When the queue warning amount in twitter.size.queueWarning is exceeded, the application will output a warning log.
    #
    # This is useful when the application is not processing the received tweets fast enough, resulting in message queue
    # growing and growing.
    #
    # The application will output this warning if the last warning was done the n minutes ago.

    # Do not set this too low, otherwise it will result in the application spamming the logs with warnings (and
    # spamming your mailbox with emails if enabled)!
    # Default is 15 minutes.
    queueWarning = 5m
  }

  size {
    # Processing queue size for received tweets
    # Default is 100000.
    msgQueue = 100000

    # Queue size for events (TODO: What actually is this?)
    # Default is 1000.
    eventQueue = 1000

    # When the received tweets queue has a larger number of items than this, the application will output a warning log.
    # This is useful when the application is not processing the received tweets fast enough, resulting in message queue
    # growing and growing.
    queueWarning=500
  }

  # Keywords for Twitter filtering stream API. If empty, sample API will be used.
  # Default is ["swarmapp com c"], which filters tweets containing swarmapp.com/c/
  keywords = ["swarmapp com c"]

  # Regex to further filter results
  # This is useful in cases where someone posts a tweet containing the string e.g. "swarmapp com c" but it
  # does not contain a link to Swarm itself.
  # Default is "\"expanded_url\":\"https?:\\/\\/www.swarmapp.com\\/c\\/\\w+\""
  filterRegex = "\"expanded_url\":\"https?:\\/\\/www.swarmapp.com\\/c\\/\\w+\""
}

foursquare {
  client.id="<key here>"
  client.secret="<key here>"

  access.token="<key here>"

  # URL for obtaining check-in data from Foursquare for retrieved swarmapp.com/c/id URLs from Twitter.
  resolveUrl="https://api.foursquare.com/v2/checkins/resolve"
}

akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "INFO"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
}

# Output files will be stored under this folder. e.g. /tmp/twitter/
outputPath = "<output path here>"

email {
  enableEmails = true

  # Email addresses for sending errors, etc. in case the system fails.
  # Please make sure that you enter valid email addresses here, as there are no checks if the address is a valid one.
  # The application might crash if you fail to do so.
  addresses = ["test@example.com"]

  # If the application should send an email in cases where the number of received tweets waiting to be processed grows
  # larger than the amount set in twitter.size.queueWarning. Timing is governed by twitter.duration.queueWarning.
  emailOnQueueWarning = true

  # Host details.
  # Only SSL is supported for now
  smtp.host="<host here>"
  smtp.port=465

  # Credentials of the mailbox from which emails will be sent.
  username="test@example.com"
  password="foobar"
}




